import re
import string
import numpy as np

arabic_punctuations = '''`÷×؛<>_()*&^%][ـ،/:"؟.,'{}~¦+|!”…“–ـ'''
english_punctuations = string.punctuation
punctuations_list = arabic_punctuations + english_punctuations


arb_stopwords = {'ء',
 'ءَ',
 'آ',
 'آب',
 'آذار',
 'آض',
 'آمينَ',
 'آناء',
 'آنفا',
 'آه',
 'آها',
 'آهاً',
 'آهٍ',
 'آهِ',
 'آي',
 'أ',
 'أبدا',
 'أبريل',
 'أبو',
 'أبٌ',
 'أجل',
 'أجمع',
 'أحد',
 'أخبر',
 'أخذ',
 'أخو',
 'أخٌ',
 'أربع',
 'أربعاء',
 'أربعة',
 'أربعمئة',
 'أربعمائة',
 'أرى',
 'أسكن',
 'أصبح',
 'أصلا',
 'أضحى',
 'أطعم',
 'أعطى',
 'أعلم',
 'أغسطس',
 'أف',
 'أفريل',
 'أفعل به',
 'أفٍّ',
 'أقبل',
 'أقل',
 'أكتوبر',
 'أكثر',
 'أل',
 'ألا',
 'ألف',
 'ألفى',
 'أم',
 'أما',
 'أمام',
 'أمامك',
 'أمامكَ',
 'أمد',
 'أمس',
 'أمسى',
 'أمّا',
 'أن',
 'أنا',
 'أنبأ',
 'أنت',
 'أنتم',
 'أنتما',
 'أنتن',
 'أنتِ',
 'أنشأ',
 'أنى',
 'أنًّ',
 'أنّى',
 'أهلا',
 'أو',
 'أوت',
 'أوشك',
 'أول',
 'أولئك',
 'أولاء',
 'أولالك',
 'أوه',
 'أوّهْ',
 'أى',
 'أي',
 'أيا',
 'أيار',
 'أيضا',
 'أيلول',
 'أين',
 'أينما',
 'أيها',
 'أيّ',
 'أيّان',
 'أُفٍّ',
 'ؤ',
 'إحدى',
 'إذ',
 'إذا',
 'إذاً',
 'إذما',
 'إذن',
 'إزاء',
 'إلا',
 'إلى',
 'إليك',
 'إليكم',
 'إليكما',
 'إليكن',
 'إليكنّ',
 'إليكَ',
 'إلَيْكَ',
 'إلّا',
 'إما',
 'إمّا',
 'إن',
 'إنا',
 'إنما',
 'إنه',
 'إنَّ',
 'إى',
 'إي',
 'إياك',
 'إياكم',
 'إياكما',
 'إياكن',
 'إيانا',
 'إياه',
 'إياها',
 'إياهم',
 'إياهما',
 'إياهن',
 'إياي',
 'إيه',
 'إيهٍ',
 'ئ',
 'ا',
 'ابتدأ',
 'اتخذ',
 'اثنا',
 'اثنان',
 'اثني',
 'اثنين',
 'اخلولق',
 'اربعون',
 'اربعين',
 'ارتدّ',
 'استحال',
 'الآن',
 'الألاء',
 'الألى',
 'التي',
 'الذي',
 'الذين',
 'اللائي',
 'اللاتي',
 'اللتان',
 'اللتيا',
 'اللتين',
 'اللذان',
 'اللذين',
 'اللواتي',
 'انبرى',
 'انقلب',
 'ب',
 'بؤسا',
 'بئس',
 'باء',
 'بات',
 'بخ',
 'بخٍ',
 'بس',
 'بسّ',
 'بضع',
 'بطآن',
 'بعد',
 'بعدا',
 'بعض',
 'بغتة',
 'بك',
 'بكم',
 'بكما',
 'بكن',
 'بل',
 'بلى',
 'بما',
 'بماذا',
 'بمن',
 'بنا',
 'به',
 'بها',
 'بهم',
 'بهما',
 'بهن',
 'بي',
 'بيد',
 'بين',
 'بَسْ',
 'بَلْهَ',
 'ة',
 'ت',
 'تاء',
 'تارة',
 'تاسع',
 'تانِ',
 'تانِك',
 'تبدّل',
 'تجاه',
 'تحت',
 'تحوّل',
 'تخذ',
 'ترك',
 'تسع',
 'تسعة',
 'تسعمئة',
 'تسعمائة',
 'تسعون',
 'تسعين',
 'تشرين',
 'تعسا',
 'تعلَّم',
 'تفعلان',
 'تفعلون',
 'تفعلين',
 'تلقاء',
 'تلك',
 'تلكم',
 'تلكما',
 'تموز',
 'ته',
 'تي',
 'تين',
 'تينك',
 'تَيْنِ',
 'تِه',
 'تِي',
 'ث',
 'ثاء',
 'ثالث',
 'ثامن',
 'ثان',
 'ثاني',
 'ثلاث',
 'ثلاثاء',
 'ثلاثة',
 'ثلاثمئة',
 'ثلاثمائة',
 'ثلاثون',
 'ثلاثين',
 'ثم',
 'ثمان',
 'ثمانمئة',
 'ثمانون',
 'ثماني',
 'ثمانية',
 'ثمانين',
 'ثمة',
 'ثمنمئة',
 'ثمَّ',
 'ثمّ',
 'ثمّة',
 'ج',
 'جانفي',
 'جعل',
 'جلل',
 'جمعة',
 'جميع',
 'جنيه',
 'جوان',
 'جويلية',
 'جير',
 'جيم',
 'ح',
 'حاء',
 'حادي',
 'حار',
 'حاشا',
 'حاي',
 'حبذا',
 'حبيب',
 'حتى',
 'حجا',
 'حدَث',
 'حرى',
 'حزيران',
 'حسب',
 'حقا',
 'حمدا',
 'حمو',
 'حمٌ',
 'حيث',
 'حيثما',
 'حين',
 'حيَّ',
 'حَذارِ',
 'خ',
 'خاء',
 'خاصة',
 'خال',
 'خامس',
 'خبَّر',
 'خلا',
 'خلافا',
 'خلف',
 'خمس',
 'خمسة',
 'خمسمئة',
 'خمسمائة',
 'خمسون',
 'خمسين',
 'خميس',
 'د',
 'دال',
 'درهم',
 'درى',
 'دواليك',
 'دولار',
 'دون',
 'دونك',
 'ديسمبر',
 'دينار',
 'ذ',
 'ذا',
 'ذات',
 'ذاك',
 'ذال',
 'ذان',
 'ذانك',
 'ذانِ',
 'ذلك',
 'ذلكم',
 'ذلكما',
 'ذلكن',
 'ذه',
 'ذهب',
 'ذو',
 'ذوا',
 'ذواتا',
 'ذواتي',
 'ذي',
 'ذيت',
 'ذين',
 'ذينك',
 'ذَيْنِ',
 'ذِه',
 'ذِي',
 'ر',
 'رأى',
 'راء',
 'رابع',
 'راح',
 'رجع',
 'رزق',
 'رويدك',
 'ريال',
 'ريث',
 'رُبَّ',
 'ز',
 'زاي',
 'زعم',
 'زود',
 'س',
 'ساء',
 'سابع',
 'سادس',
 'سبت',
 'سبتمبر',
 'سبحان',
 'سبع',
 'سبعة',
 'سبعمئة',
 'سبعمائة',
 'سبعون',
 'سبعين',
 'ست',
 'ستة',
 'ستمئة',
 'ستمائة',
 'ستون',
 'ستين',
 'سحقا',
 'سرا',
 'سرعان',
 'سقى',
 'سمعا',
 'سنتيم',
 'سوف',
 'سوى',
 'سين',
 'ش',
 'شباط',
 'شبه',
 'شتان',
 'شتانَ',
 'شرع',
 'شمال',
 'شيكل',
 'شين',
 'شَتَّانَ',
 'ص',
 'صاد',
 'صار',
 'صباح',
 'صبر',
 'صبرا',
 'صدقا',
 'صراحة',
 'صهٍ',
 'صهْ',
 'ض',
 'ضاد',
 'ضحوة',
 'ط',
 'طاء',
 'طاق',
 'طالما',
 'طرا',
 'طفق',
 'طَق',
 'ظ',
 'ظاء',
 'ظلّ',
 'ظنَّ',
 'ع',
 'عاد',
 'عاشر',
 'عامة',
 'عجبا',
 'عدا',
 'عدَّ',
 'عسى',
 'عشر',
 'عشرة',
 'عشرون',
 'عشرين',
 'عل',
 'علق',
 'علم',
 'على',
 'عليك',
 'عليه',
 'علًّ',
 'عما',
 'عن',
 'عند',
 'عوض',
 'عيانا',
 'عين',
 'عَدَسْ',
 'غ',
 'غادر',
 'غالبا',
 'غدا',
 'غداة',
 'غير',
 'غين',
 'ف',
 'فإذا',
 'فإن',
 'فاء',
 'فبراير',
 'فرادى',
 'فضلا',
 'فلا',
 'فلان',
 'فلس',
 'فمن',
 'فو',
 'فوق',
 'في',
 'فيفري',
 'فيم',
 'فيما',
 'فيه',
 'فيها',
 'ق',
 'قاطبة',
 'قاف',
 'قام',
 'قبل',
 'قد',
 'قرش',
 'قطّ',
 'قلما',
 'ك',
 'كأن',
 'كأنما',
 'كأنّ',
 'كأي',
 'كأين',
 'كأيّ',
 'كأيّن',
 'كاد',
 'كاف',
 'كان',
 'كانون',
 'كثيرا',
 'كذا',
 'كذلك',
 'كرب',
 'كسا',
 'كل',
 'كلا',
 'كلاهما',
 'كلتا',
 'كلما',
 'كليكما',
 'كليهما',
 'كلَّا',
 'كلّما',
 'كم',
 'كما',
 'كن',
 'كى',
 'كي',
 'كيت',
 'كيف',
 'كيفما',
 'كِخ',
 'ل',
 'لئن',
 'لا',
 'لا سيما',
 'لات',
 'لاسيما',
 'لام',
 'لبيك',
 'لدن',
 'لدى',
 'لست',
 'لستم',
 'لستما',
 'لستن',
 'لسن',
 'لسنا',
 'لعل',
 'لعلَّ',
 'لعمر',
 'لك',
 'لكم',
 'لكما',
 'لكن',
 'لكنما',
 'لكنَّ',
 'لكي',
 'لكيلا',
 'لم',
 'لما',
 'لمّا',
 'لن',
 'لنا',
 'له',
 'لها',
 'لهم',
 'لهما',
 'لهن',
 'لو',
 'لولا',
 'لوما',
 'لي',
 'ليت',
 'ليرة',
 'ليس',
 'ليسا',
 'ليست',
 'ليستا',
 'ليسوا',
 'م',
 'مئة',
 'مئتان',
 'ما',
 'ما أفعله',
 'ما انفك',
 'ما برح',
 'مائة',
 'مادام',
 'ماذا',
 'مارس',
 'مازال',
 'مافتئ',
 'ماي',
 'مايو',
 'متى',
 'مثل',
 'مذ',
 'مرّة',
 'مساء',
 'مع',
 'معاذ',
 'مكانكم',
 'مكانكما',
 'مكانكنّ',
 'مكانَك',
 'مليم',
 'مما',
 'ممن',
 'من',
 'منذ',
 'منه',
 'منها',
 'مه',
 'مهما',
 'ميم',
 'ن',
 'نا',
 'نبَّا',
 'نحن',
 'نحو',
 'نعم',
 'نفس',
 'نوفمبر',
 'نون',
 'نيسان',
 'نيف',
 'نَخْ',
 'نَّ',
 'ه',
 'هؤلاء',
 'ها',
 'هاء',
 'هاتان',
 'هاته',
 'هاتي',
 'هاتين',
 'هاك',
 'هاكَ',
 'هاهنا',
 'هبّ',
 'هذا',
 'هذان',
 'هذه',
 'هذي',
 'هذين',
 'هكذا',
 'هل',
 'هلا',
 'هللة',
 'هلم',
 'هلّا',
 'هم',
 'هما',
 'همزة',
 'هن',
 'هنا',
 'هناك',
 'هنالك',
 'هو',
 'هي',
 'هيا',
 'هيت',
 'هيهات',
 'هيّا',
 'هَؤلاء',
 'هَاتانِ',
 'هَاتَيْنِ',
 'هَاتِه',
 'هَاتِي',
 'هَجْ',
 'هَذا',
 'هَذانِ',
 'هَذَيْنِ',
 'هَذِه',
 'هَذِي',
 'هَيْهات',
 'و',
 'وإذ',
 'وإذا',
 'وإن',
 'وا',
 'واحد',
 'والذي',
 'والذين',
 'واهاً',
 'واو',
 'وجد',
 'وراءَك',
 'ورد',
 'ولا',
 'ولكن',
 'ولو',
 'وما',
 'ومن',
 'وهب',
 'وهو',
 'وَيْ',
 'وُشْكَانَ',
 'ى',
 'ي',
 'يا',
 'ياء',
 'يفعلان',
 'يفعلون',
 'يمين',
 'ين',
 'يناير',
 'يوان',
 'يورو',
 'يوليو',
 'يونيو',
 'ّأيّان'}

arabic_diacritics = re.compile("""
                             ّ    | # Tashdid
                             َ    | # Fatha
                             ً    | # Tanwin Fath
                             ُ    | # Damma
                             ٌ    | # Tanwin Damm
                             ِ    | # Kasra
                             ٍ    | # Tanwin Kasr
                             ْ    | # Sukun
                             ـ     # Tatwil/Kashida
                         """, re.VERBOSE)


def normalize_arabic(text):
    text = re.sub("[إأآا]", "ا", text)
    text = re.sub("ى", "ي", text)
    text = re.sub("ؤ", "ء", text)
    text = re.sub("ئ", "ء", text)
    text = re.sub("ة", "ه", text)
    text = re.sub("گ", "ك", text)
    return text


def remove_diacritics(text):
    text = re.sub(arabic_diacritics, '', text)
    return text


def remove_punctuations(text):
    translator = str.maketrans('', '', punctuations_list)
    return text.translate(translator)


def remove_repeating_char(text):
    return re.sub(r'(.)\1+', r'\1', text)


def remove_stop_words(text):
    text = ' '.join([x for x in text.split(' ') if x not in arb_stopwords])
    return text


def clean_str(text):
    search = ["أ", "إ", "آ", "ة", "_", "-", "/", ".", "،", " و ", " يا ", '"', "ـ", "'", "ى", "\\", '\n', '\t',
              '&quot;', '?', '؟', '!']
    replace = ["ا", "ا", "ا", "ه", " ", " ", "", "", "", " و", " يا", "", "", "", "ي", "", ' ', ' ', ' ', ' ? ', ' ؟ ',
               ' ! ']

    # remove tashkeel
    p_tashkeel = re.compile(r'[\u0617-\u061A\u064B-\u0652]')
    text = re.sub(p_tashkeel, "", text)

    # remove longation
    p_longation = re.compile(r'(.)\1+')
    subst = r"\1\1"
    text = re.sub(p_longation, subst, text)

    text = text.replace('وو', 'و')
    text = text.replace('يي', 'ي')
    text = text.replace('اا', 'ا')

    for i in range(0, len(search)):
        text = text.replace(search[i], replace[i])

    # trim
    text = text.strip()

    return text


def preprocessing(text):
    text = normalize_arabic(text)
    text = remove_diacritics(text)
    text = remove_punctuations(text)
    text = remove_repeating_char(text)
    text = remove_stop_words(text)
    text = clean_str(text)

    return text



def decode_sequence(input_seq,encoder_model,decoder_model,target_word_index,reverse_target_word_index,max_summary_len):
    # Encode the input as state vectors.
    e_out, e_h, e_c = encoder_model.predict(input_seq)

    # Generate empty target sequence of length 1.
    target_seq = np.zeros((1, 1))

    # Populate the first word of target sequence with the start word.
    target_seq[0, 0] = target_word_index['sostok']

    stop_condition = False
    decoded_sentence = ''
    while not stop_condition:

        output_tokens, h, c = decoder_model.predict([target_seq] + [e_out, e_h, e_c])

        # Sample a token

        # why [0,-1,:] ??
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_token = reverse_target_word_index[sampled_token_index]

        if (sampled_token != 'eostok'):
            decoded_sentence += ' ' + sampled_token

        # Exit condition: either hit max length or find stop word.
        if (sampled_token == 'eostok' or len(decoded_sentence.split()) >= (max_summary_len - 1)):
            stop_condition = True

        # Update the target sequence (of length 1).
        target_seq = np.zeros((1, 1))
        target_seq[0, 0] = sampled_token_index

        # Update internal states
        e_h, e_c = h, c

    return decoded_sentence

def seq2summary(input_seq,target_word_index,reverse_target_word_index):
    # breakpoint()
    newString=''
    for i in input_seq:
        if((i!=0 and i!=target_word_index['sostok']) and i!=target_word_index['eostok']):
            newString=newString+reverse_target_word_index[i]+' '
    return newString

def seq2text(input_seq,reverse_source_word_index):
    newString=''
    for i in input_seq:
        if(i!=0):
            newString=newString+reverse_source_word_index[i]+' '
    return newString
